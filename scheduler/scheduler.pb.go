// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scheduler.proto

package com_cyto_scheduler

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ScheduledTask_IntervalType int32

const (
	ScheduledTask_SECONDS ScheduledTask_IntervalType = 0
	ScheduledTask_MINUTES ScheduledTask_IntervalType = 1
	ScheduledTask_HOURS   ScheduledTask_IntervalType = 2
	ScheduledTask_DAYS    ScheduledTask_IntervalType = 3
	ScheduledTask_WEEKS   ScheduledTask_IntervalType = 4
	ScheduledTask_MONTHS  ScheduledTask_IntervalType = 5
	ScheduledTask_YEARS   ScheduledTask_IntervalType = 6
)

var ScheduledTask_IntervalType_name = map[int32]string{
	0: "SECONDS",
	1: "MINUTES",
	2: "HOURS",
	3: "DAYS",
	4: "WEEKS",
	5: "MONTHS",
	6: "YEARS",
}

var ScheduledTask_IntervalType_value = map[string]int32{
	"SECONDS": 0,
	"MINUTES": 1,
	"HOURS":   2,
	"DAYS":    3,
	"WEEKS":   4,
	"MONTHS":  5,
	"YEARS":   6,
}

func (x ScheduledTask_IntervalType) String() string {
	return proto.EnumName(ScheduledTask_IntervalType_name, int32(x))
}

func (ScheduledTask_IntervalType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{4, 0}
}

type GuildQuery struct {
	GuildID              string   `protobuf:"bytes,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuildQuery) Reset()         { *m = GuildQuery{} }
func (m *GuildQuery) String() string { return proto.CompactTextString(m) }
func (*GuildQuery) ProtoMessage()    {}
func (*GuildQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{0}
}

func (m *GuildQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GuildQuery.Unmarshal(m, b)
}
func (m *GuildQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GuildQuery.Marshal(b, m, deterministic)
}
func (m *GuildQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildQuery.Merge(m, src)
}
func (m *GuildQuery) XXX_Size() int {
	return xxx_messageInfo_GuildQuery.Size(m)
}
func (m *GuildQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GuildQuery proto.InternalMessageInfo

func (m *GuildQuery) GetGuildID() string {
	if m != nil {
		return m.GuildID
	}
	return ""
}

type UserQuery struct {
	UserID               string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserQuery) Reset()         { *m = UserQuery{} }
func (m *UserQuery) String() string { return proto.CompactTextString(m) }
func (*UserQuery) ProtoMessage()    {}
func (*UserQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{1}
}

func (m *UserQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserQuery.Unmarshal(m, b)
}
func (m *UserQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserQuery.Marshal(b, m, deterministic)
}
func (m *UserQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserQuery.Merge(m, src)
}
func (m *UserQuery) XXX_Size() int {
	return xxx_messageInfo_UserQuery.Size(m)
}
func (m *UserQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_UserQuery.DiscardUnknown(m)
}

var xxx_messageInfo_UserQuery proto.InternalMessageInfo

func (m *UserQuery) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type ScheduledTaskQuery struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScheduledTaskQuery) Reset()         { *m = ScheduledTaskQuery{} }
func (m *ScheduledTaskQuery) String() string { return proto.CompactTextString(m) }
func (*ScheduledTaskQuery) ProtoMessage()    {}
func (*ScheduledTaskQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{2}
}

func (m *ScheduledTaskQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduledTaskQuery.Unmarshal(m, b)
}
func (m *ScheduledTaskQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduledTaskQuery.Marshal(b, m, deterministic)
}
func (m *ScheduledTaskQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduledTaskQuery.Merge(m, src)
}
func (m *ScheduledTaskQuery) XXX_Size() int {
	return xxx_messageInfo_ScheduledTaskQuery.Size(m)
}
func (m *ScheduledTaskQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduledTaskQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduledTaskQuery proto.InternalMessageInfo

func (m *ScheduledTaskQuery) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type ScheduledTaskList struct {
	Tasks                []*ScheduledTask `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ScheduledTaskList) Reset()         { *m = ScheduledTaskList{} }
func (m *ScheduledTaskList) String() string { return proto.CompactTextString(m) }
func (*ScheduledTaskList) ProtoMessage()    {}
func (*ScheduledTaskList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{3}
}

func (m *ScheduledTaskList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduledTaskList.Unmarshal(m, b)
}
func (m *ScheduledTaskList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduledTaskList.Marshal(b, m, deterministic)
}
func (m *ScheduledTaskList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduledTaskList.Merge(m, src)
}
func (m *ScheduledTaskList) XXX_Size() int {
	return xxx_messageInfo_ScheduledTaskList.Size(m)
}
func (m *ScheduledTaskList) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduledTaskList.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduledTaskList proto.InternalMessageInfo

func (m *ScheduledTaskList) GetTasks() []*ScheduledTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type ScheduledTask struct {
	ID                   string                     `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	CreatorID            string                     `protobuf:"bytes,2,opt,name=creatorID,proto3" json:"creatorID,omitempty"`
	CreatedDate          string                     `protobuf:"bytes,3,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	GuildID              string                     `protobuf:"bytes,4,opt,name=guildID,proto3" json:"guildID,omitempty"`
	ChannelID            string                     `protobuf:"bytes,5,opt,name=channelID,proto3" json:"channelID,omitempty"`
	IsDirect             bool                       `protobuf:"varint,6,opt,name=isDirect,proto3" json:"isDirect,omitempty"`
	Message              string                     `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	Type                 ScheduledTask_IntervalType `protobuf:"varint,9,opt,name=type,proto3,enum=com.cyto.scheduler.ScheduledTask_IntervalType" json:"type,omitempty"`
	Interval             int32                      `protobuf:"varint,10,opt,name=interval,proto3" json:"interval,omitempty"`
	Recurring            bool                       `protobuf:"varint,11,opt,name=recurring,proto3" json:"recurring,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ScheduledTask) Reset()         { *m = ScheduledTask{} }
func (m *ScheduledTask) String() string { return proto.CompactTextString(m) }
func (*ScheduledTask) ProtoMessage()    {}
func (*ScheduledTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{4}
}

func (m *ScheduledTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduledTask.Unmarshal(m, b)
}
func (m *ScheduledTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduledTask.Marshal(b, m, deterministic)
}
func (m *ScheduledTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduledTask.Merge(m, src)
}
func (m *ScheduledTask) XXX_Size() int {
	return xxx_messageInfo_ScheduledTask.Size(m)
}
func (m *ScheduledTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduledTask.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduledTask proto.InternalMessageInfo

func (m *ScheduledTask) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ScheduledTask) GetCreatorID() string {
	if m != nil {
		return m.CreatorID
	}
	return ""
}

func (m *ScheduledTask) GetCreatedDate() string {
	if m != nil {
		return m.CreatedDate
	}
	return ""
}

func (m *ScheduledTask) GetGuildID() string {
	if m != nil {
		return m.GuildID
	}
	return ""
}

func (m *ScheduledTask) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *ScheduledTask) GetIsDirect() bool {
	if m != nil {
		return m.IsDirect
	}
	return false
}

func (m *ScheduledTask) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ScheduledTask) GetType() ScheduledTask_IntervalType {
	if m != nil {
		return m.Type
	}
	return ScheduledTask_SECONDS
}

func (m *ScheduledTask) GetInterval() int32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *ScheduledTask) GetRecurring() bool {
	if m != nil {
		return m.Recurring
	}
	return false
}

func init() {
	proto.RegisterEnum("com.cyto.scheduler.ScheduledTask_IntervalType", ScheduledTask_IntervalType_name, ScheduledTask_IntervalType_value)
	proto.RegisterType((*GuildQuery)(nil), "com.cyto.scheduler.GuildQuery")
	proto.RegisterType((*UserQuery)(nil), "com.cyto.scheduler.UserQuery")
	proto.RegisterType((*ScheduledTaskQuery)(nil), "com.cyto.scheduler.ScheduledTaskQuery")
	proto.RegisterType((*ScheduledTaskList)(nil), "com.cyto.scheduler.ScheduledTaskList")
	proto.RegisterType((*ScheduledTask)(nil), "com.cyto.scheduler.ScheduledTask")
}

func init() { proto.RegisterFile("scheduler.proto", fileDescriptor_2b3fc28395a6d9c5) }

var fileDescriptor_2b3fc28395a6d9c5 = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0x93, 0x38, 0x8d, 0x27, 0x50, 0xcc, 0x22, 0xa1, 0x25, 0x82, 0x62, 0x8c, 0xa8, 0x72,
	0x40, 0x3e, 0x84, 0x03, 0xe7, 0x80, 0x43, 0x1b, 0xd1, 0x26, 0xc2, 0x9b, 0x08, 0x95, 0x4b, 0xe5,
	0xda, 0xab, 0xc4, 0xd4, 0x89, 0xa3, 0xdd, 0x75, 0xa5, 0xfc, 0x13, 0x9f, 0xc2, 0x47, 0xa1, 0x5d,
	0x3b, 0x4e, 0x5c, 0x82, 0x0c, 0x12, 0x3d, 0xbe, 0x37, 0x6f, 0xde, 0x1b, 0xcd, 0x7a, 0x0c, 0x8f,
	0x78, 0x30, 0xa7, 0x61, 0x1a, 0x53, 0xe6, 0xac, 0x58, 0x22, 0x12, 0x84, 0x82, 0x64, 0xe1, 0x04,
	0x6b, 0x91, 0x38, 0x45, 0xc5, 0x3e, 0x01, 0x38, 0x4d, 0xa3, 0x38, 0xfc, 0x92, 0x52, 0xb6, 0x46,
	0x18, 0x0e, 0x67, 0x12, 0x0d, 0x5d, 0xac, 0x59, 0x5a, 0xd7, 0xf0, 0x36, 0xd0, 0x7e, 0x0d, 0xc6,
	0x94, 0x53, 0x96, 0xc9, 0x9e, 0x42, 0x33, 0xe5, 0x94, 0x15, 0xaa, 0x1c, 0xd9, 0x6f, 0x01, 0x91,
	0xdc, 0x39, 0x9c, 0xf8, 0xfc, 0xa6, 0x50, 0x0b, 0x9f, 0xdf, 0x0c, 0xc3, 0x8d, 0x3a, 0x43, 0xf6,
	0x39, 0x3c, 0x2e, 0xa9, 0xcf, 0x23, 0x2e, 0xd0, 0x7b, 0xd0, 0x65, 0x99, 0x63, 0xcd, 0xaa, 0x77,
	0xdb, 0xbd, 0x57, 0xce, 0xef, 0x33, 0x3b, 0xa5, 0x2e, 0x2f, 0xd3, 0xdb, 0x3f, 0xea, 0xf0, 0xb0,
	0x54, 0x40, 0x47, 0x50, 0x2b, 0x26, 0xac, 0x45, 0x2e, 0x7a, 0x0e, 0x46, 0xc0, 0xa8, 0x2f, 0x12,
	0x39, 0x78, 0x4d, 0xd1, 0x5b, 0x02, 0x59, 0xd0, 0x56, 0x80, 0x86, 0xae, 0x2f, 0x28, 0xae, 0xab,
	0xfa, 0x2e, 0xb5, 0xbb, 0x9c, 0x46, 0x69, 0x39, 0xca, 0x79, 0xee, 0x2f, 0x97, 0x34, 0x1e, 0xba,
	0x58, 0xcf, 0x9d, 0x37, 0x04, 0xea, 0x40, 0x2b, 0xe2, 0x6e, 0xc4, 0x68, 0x20, 0x70, 0xd3, 0xd2,
	0xba, 0x2d, 0xaf, 0xc0, 0xd2, 0x73, 0x41, 0x39, 0xf7, 0x67, 0x14, 0xb7, 0x32, 0xcf, 0x1c, 0xa2,
	0x0f, 0xd0, 0x10, 0xeb, 0x15, 0xc5, 0x86, 0xa5, 0x75, 0x8f, 0x7a, 0x4e, 0xe5, 0x1e, 0x9c, 0xe1,
	0x52, 0x50, 0x76, 0xeb, 0xc7, 0x93, 0xf5, 0x8a, 0x7a, 0xaa, 0x57, 0x25, 0xe7, 0x2c, 0x06, 0x4b,
	0xeb, 0xea, 0x5e, 0x81, 0xe5, 0xcc, 0x8c, 0x06, 0x29, 0x63, 0xd1, 0x72, 0x86, 0xdb, 0x6a, 0xac,
	0x2d, 0x61, 0x5f, 0xc1, 0x83, 0x5d, 0x3f, 0xd4, 0x86, 0x43, 0x32, 0xf8, 0x38, 0x1e, 0xb9, 0xc4,
	0x3c, 0x90, 0xe0, 0x62, 0x38, 0x9a, 0x4e, 0x06, 0xc4, 0xd4, 0x90, 0x01, 0xfa, 0xd9, 0x78, 0xea,
	0x11, 0xb3, 0x86, 0x5a, 0xd0, 0x70, 0xfb, 0x97, 0xc4, 0xac, 0x4b, 0xf2, 0xeb, 0x60, 0xf0, 0x99,
	0x98, 0x0d, 0x04, 0xd0, 0xbc, 0x18, 0x8f, 0x26, 0x67, 0xc4, 0xd4, 0x25, 0x7d, 0x39, 0xe8, 0x7b,
	0xc4, 0x6c, 0xf6, 0x7e, 0xea, 0x60, 0x6c, 0xe6, 0x67, 0xe8, 0x1b, 0x98, 0x84, 0x8a, 0xf2, 0xf3,
	0x55, 0x3f, 0x7d, 0xa7, 0x5a, 0x62, 0x1f, 0xa0, 0x2b, 0x30, 0x4f, 0xef, 0x7a, 0x9f, 0x54, 0x36,
	0xaa, 0x4f, 0xf7, 0xef, 0x02, 0x42, 0x78, 0x76, 0x37, 0x80, 0x7f, 0x4a, 0x98, 0x3a, 0x2b, 0x74,
	0xbc, 0xcf, 0x61, 0x7b, 0x71, 0x9d, 0x37, 0x95, 0x09, 0xf2, 0x2c, 0xec, 0x03, 0x74, 0x0d, 0x78,
	0x5f, 0x8a, 0x3c, 0x4a, 0xf4, 0x62, 0x9f, 0x49, 0x71, 0xae, 0xff, 0x92, 0xf1, 0xc4, 0xa3, 0x8b,
	0xe4, 0x96, 0xde, 0xe3, 0xb6, 0xbe, 0xc3, 0xcb, 0x2c, 0xa3, 0x1f, 0xc7, 0xf7, 0xbd, 0xb3, 0x39,
	0x1c, 0xff, 0x39, 0xeb, 0x7f, 0x6e, 0xee, 0xba, 0xa9, 0xfe, 0xb0, 0xef, 0x7e, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x7f, 0x4d, 0xc0, 0xc7, 0x74, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerClient interface {
	SetScheduledTask(ctx context.Context, in *ScheduledTask, opts ...grpc.CallOption) (*ScheduledTask, error)
	GetScheduledTask(ctx context.Context, in *ScheduledTaskQuery, opts ...grpc.CallOption) (*ScheduledTask, error)
	GetScheduledTasksForGuild(ctx context.Context, in *GuildQuery, opts ...grpc.CallOption) (*ScheduledTaskList, error)
	GetScheduledTasksForUser(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*ScheduledTaskList, error)
	RemoveScheduledTask(ctx context.Context, in *ScheduledTaskQuery, opts ...grpc.CallOption) (*ScheduledTask, error)
	RemoveAllScheduledTasksForGuild(ctx context.Context, in *GuildQuery, opts ...grpc.CallOption) (*ScheduledTaskList, error)
	RemoveAllScheduledTasksForUser(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*ScheduledTaskList, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) SetScheduledTask(ctx context.Context, in *ScheduledTask, opts ...grpc.CallOption) (*ScheduledTask, error) {
	out := new(ScheduledTask)
	err := c.cc.Invoke(ctx, "/com.cyto.scheduler.Scheduler/SetScheduledTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetScheduledTask(ctx context.Context, in *ScheduledTaskQuery, opts ...grpc.CallOption) (*ScheduledTask, error) {
	out := new(ScheduledTask)
	err := c.cc.Invoke(ctx, "/com.cyto.scheduler.Scheduler/GetScheduledTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetScheduledTasksForGuild(ctx context.Context, in *GuildQuery, opts ...grpc.CallOption) (*ScheduledTaskList, error) {
	out := new(ScheduledTaskList)
	err := c.cc.Invoke(ctx, "/com.cyto.scheduler.Scheduler/GetScheduledTasksForGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetScheduledTasksForUser(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*ScheduledTaskList, error) {
	out := new(ScheduledTaskList)
	err := c.cc.Invoke(ctx, "/com.cyto.scheduler.Scheduler/GetScheduledTasksForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) RemoveScheduledTask(ctx context.Context, in *ScheduledTaskQuery, opts ...grpc.CallOption) (*ScheduledTask, error) {
	out := new(ScheduledTask)
	err := c.cc.Invoke(ctx, "/com.cyto.scheduler.Scheduler/RemoveScheduledTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) RemoveAllScheduledTasksForGuild(ctx context.Context, in *GuildQuery, opts ...grpc.CallOption) (*ScheduledTaskList, error) {
	out := new(ScheduledTaskList)
	err := c.cc.Invoke(ctx, "/com.cyto.scheduler.Scheduler/RemoveAllScheduledTasksForGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) RemoveAllScheduledTasksForUser(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*ScheduledTaskList, error) {
	out := new(ScheduledTaskList)
	err := c.cc.Invoke(ctx, "/com.cyto.scheduler.Scheduler/RemoveAllScheduledTasksForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
type SchedulerServer interface {
	SetScheduledTask(context.Context, *ScheduledTask) (*ScheduledTask, error)
	GetScheduledTask(context.Context, *ScheduledTaskQuery) (*ScheduledTask, error)
	GetScheduledTasksForGuild(context.Context, *GuildQuery) (*ScheduledTaskList, error)
	GetScheduledTasksForUser(context.Context, *UserQuery) (*ScheduledTaskList, error)
	RemoveScheduledTask(context.Context, *ScheduledTaskQuery) (*ScheduledTask, error)
	RemoveAllScheduledTasksForGuild(context.Context, *GuildQuery) (*ScheduledTaskList, error)
	RemoveAllScheduledTasksForUser(context.Context, *UserQuery) (*ScheduledTaskList, error)
}

// UnimplementedSchedulerServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (*UnimplementedSchedulerServer) SetScheduledTask(ctx context.Context, req *ScheduledTask) (*ScheduledTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScheduledTask not implemented")
}
func (*UnimplementedSchedulerServer) GetScheduledTask(ctx context.Context, req *ScheduledTaskQuery) (*ScheduledTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledTask not implemented")
}
func (*UnimplementedSchedulerServer) GetScheduledTasksForGuild(ctx context.Context, req *GuildQuery) (*ScheduledTaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledTasksForGuild not implemented")
}
func (*UnimplementedSchedulerServer) GetScheduledTasksForUser(ctx context.Context, req *UserQuery) (*ScheduledTaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledTasksForUser not implemented")
}
func (*UnimplementedSchedulerServer) RemoveScheduledTask(ctx context.Context, req *ScheduledTaskQuery) (*ScheduledTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveScheduledTask not implemented")
}
func (*UnimplementedSchedulerServer) RemoveAllScheduledTasksForGuild(ctx context.Context, req *GuildQuery) (*ScheduledTaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllScheduledTasksForGuild not implemented")
}
func (*UnimplementedSchedulerServer) RemoveAllScheduledTasksForUser(ctx context.Context, req *UserQuery) (*ScheduledTaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllScheduledTasksForUser not implemented")
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_SetScheduledTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).SetScheduledTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.scheduler.Scheduler/SetScheduledTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).SetScheduledTask(ctx, req.(*ScheduledTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetScheduledTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledTaskQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetScheduledTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.scheduler.Scheduler/GetScheduledTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetScheduledTask(ctx, req.(*ScheduledTaskQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetScheduledTasksForGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetScheduledTasksForGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.scheduler.Scheduler/GetScheduledTasksForGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetScheduledTasksForGuild(ctx, req.(*GuildQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetScheduledTasksForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetScheduledTasksForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.scheduler.Scheduler/GetScheduledTasksForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetScheduledTasksForUser(ctx, req.(*UserQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_RemoveScheduledTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledTaskQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).RemoveScheduledTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.scheduler.Scheduler/RemoveScheduledTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).RemoveScheduledTask(ctx, req.(*ScheduledTaskQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_RemoveAllScheduledTasksForGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).RemoveAllScheduledTasksForGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.scheduler.Scheduler/RemoveAllScheduledTasksForGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).RemoveAllScheduledTasksForGuild(ctx, req.(*GuildQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_RemoveAllScheduledTasksForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).RemoveAllScheduledTasksForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.scheduler.Scheduler/RemoveAllScheduledTasksForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).RemoveAllScheduledTasksForUser(ctx, req.(*UserQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.cyto.scheduler.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetScheduledTask",
			Handler:    _Scheduler_SetScheduledTask_Handler,
		},
		{
			MethodName: "GetScheduledTask",
			Handler:    _Scheduler_GetScheduledTask_Handler,
		},
		{
			MethodName: "GetScheduledTasksForGuild",
			Handler:    _Scheduler_GetScheduledTasksForGuild_Handler,
		},
		{
			MethodName: "GetScheduledTasksForUser",
			Handler:    _Scheduler_GetScheduledTasksForUser_Handler,
		},
		{
			MethodName: "RemoveScheduledTask",
			Handler:    _Scheduler_RemoveScheduledTask_Handler,
		},
		{
			MethodName: "RemoveAllScheduledTasksForGuild",
			Handler:    _Scheduler_RemoveAllScheduledTasksForGuild_Handler,
		},
		{
			MethodName: "RemoveAllScheduledTasksForUser",
			Handler:    _Scheduler_RemoveAllScheduledTasksForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduler.proto",
}
