// Code generated by protoc-gen-go. DO NOT EDIT.
// source: discord.proto

package com_cyto_discord

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GuildQuery struct {
	GuildID              string   `protobuf:"bytes,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuildQuery) Reset()         { *m = GuildQuery{} }
func (m *GuildQuery) String() string { return proto.CompactTextString(m) }
func (*GuildQuery) ProtoMessage()    {}
func (*GuildQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{0}
}

func (m *GuildQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GuildQuery.Unmarshal(m, b)
}
func (m *GuildQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GuildQuery.Marshal(b, m, deterministic)
}
func (m *GuildQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildQuery.Merge(m, src)
}
func (m *GuildQuery) XXX_Size() int {
	return xxx_messageInfo_GuildQuery.Size(m)
}
func (m *GuildQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GuildQuery proto.InternalMessageInfo

func (m *GuildQuery) GetGuildID() string {
	if m != nil {
		return m.GuildID
	}
	return ""
}

type GuildMemberQuery struct {
	GuildID              string   `protobuf:"bytes,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	UserID               string   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuildMemberQuery) Reset()         { *m = GuildMemberQuery{} }
func (m *GuildMemberQuery) String() string { return proto.CompactTextString(m) }
func (*GuildMemberQuery) ProtoMessage()    {}
func (*GuildMemberQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{1}
}

func (m *GuildMemberQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GuildMemberQuery.Unmarshal(m, b)
}
func (m *GuildMemberQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GuildMemberQuery.Marshal(b, m, deterministic)
}
func (m *GuildMemberQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildMemberQuery.Merge(m, src)
}
func (m *GuildMemberQuery) XXX_Size() int {
	return xxx_messageInfo_GuildMemberQuery.Size(m)
}
func (m *GuildMemberQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildMemberQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GuildMemberQuery proto.InternalMessageInfo

func (m *GuildMemberQuery) GetGuildID() string {
	if m != nil {
		return m.GuildID
	}
	return ""
}

func (m *GuildMemberQuery) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GuildMembersQuery struct {
	GuildId              string   `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	Limit                int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	AfterUserID          string   `protobuf:"bytes,3,opt,name=afterUserID,proto3" json:"afterUserID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuildMembersQuery) Reset()         { *m = GuildMembersQuery{} }
func (m *GuildMembersQuery) String() string { return proto.CompactTextString(m) }
func (*GuildMembersQuery) ProtoMessage()    {}
func (*GuildMembersQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{2}
}

func (m *GuildMembersQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GuildMembersQuery.Unmarshal(m, b)
}
func (m *GuildMembersQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GuildMembersQuery.Marshal(b, m, deterministic)
}
func (m *GuildMembersQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildMembersQuery.Merge(m, src)
}
func (m *GuildMembersQuery) XXX_Size() int {
	return xxx_messageInfo_GuildMembersQuery.Size(m)
}
func (m *GuildMembersQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildMembersQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GuildMembersQuery proto.InternalMessageInfo

func (m *GuildMembersQuery) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *GuildMembersQuery) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GuildMembersQuery) GetAfterUserID() string {
	if m != nil {
		return m.AfterUserID
	}
	return ""
}

type ChannelQuery struct {
	ChannelID            string   `protobuf:"bytes,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelQuery) Reset()         { *m = ChannelQuery{} }
func (m *ChannelQuery) String() string { return proto.CompactTextString(m) }
func (*ChannelQuery) ProtoMessage()    {}
func (*ChannelQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{3}
}

func (m *ChannelQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelQuery.Unmarshal(m, b)
}
func (m *ChannelQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelQuery.Marshal(b, m, deterministic)
}
func (m *ChannelQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelQuery.Merge(m, src)
}
func (m *ChannelQuery) XXX_Size() int {
	return xxx_messageInfo_ChannelQuery.Size(m)
}
func (m *ChannelQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelQuery proto.InternalMessageInfo

func (m *ChannelQuery) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

type ChannelMessagesQuery struct {
	ChannelID            string   `protobuf:"bytes,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	AroundMessageID      string   `protobuf:"bytes,2,opt,name=aroundMessageID,proto3" json:"aroundMessageID,omitempty"`
	BeforeMessageID      string   `protobuf:"bytes,3,opt,name=beforeMessageID,proto3" json:"beforeMessageID,omitempty"`
	AfterMessageID       string   `protobuf:"bytes,4,opt,name=afterMessageID,proto3" json:"afterMessageID,omitempty"`
	Limit                int32    `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelMessagesQuery) Reset()         { *m = ChannelMessagesQuery{} }
func (m *ChannelMessagesQuery) String() string { return proto.CompactTextString(m) }
func (*ChannelMessagesQuery) ProtoMessage()    {}
func (*ChannelMessagesQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{4}
}

func (m *ChannelMessagesQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelMessagesQuery.Unmarshal(m, b)
}
func (m *ChannelMessagesQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelMessagesQuery.Marshal(b, m, deterministic)
}
func (m *ChannelMessagesQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelMessagesQuery.Merge(m, src)
}
func (m *ChannelMessagesQuery) XXX_Size() int {
	return xxx_messageInfo_ChannelMessagesQuery.Size(m)
}
func (m *ChannelMessagesQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelMessagesQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelMessagesQuery proto.InternalMessageInfo

func (m *ChannelMessagesQuery) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *ChannelMessagesQuery) GetAroundMessageID() string {
	if m != nil {
		return m.AroundMessageID
	}
	return ""
}

func (m *ChannelMessagesQuery) GetBeforeMessageID() string {
	if m != nil {
		return m.BeforeMessageID
	}
	return ""
}

func (m *ChannelMessagesQuery) GetAfterMessageID() string {
	if m != nil {
		return m.AfterMessageID
	}
	return ""
}

func (m *ChannelMessagesQuery) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ChannelMessageQuery struct {
	ChannelID            string   `protobuf:"bytes,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	MessageID            string   `protobuf:"bytes,2,opt,name=messageID,proto3" json:"messageID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelMessageQuery) Reset()         { *m = ChannelMessageQuery{} }
func (m *ChannelMessageQuery) String() string { return proto.CompactTextString(m) }
func (*ChannelMessageQuery) ProtoMessage()    {}
func (*ChannelMessageQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{5}
}

func (m *ChannelMessageQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelMessageQuery.Unmarshal(m, b)
}
func (m *ChannelMessageQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelMessageQuery.Marshal(b, m, deterministic)
}
func (m *ChannelMessageQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelMessageQuery.Merge(m, src)
}
func (m *ChannelMessageQuery) XXX_Size() int {
	return xxx_messageInfo_ChannelMessageQuery.Size(m)
}
func (m *ChannelMessageQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelMessageQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelMessageQuery proto.InternalMessageInfo

func (m *ChannelMessageQuery) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *ChannelMessageQuery) GetMessageID() string {
	if m != nil {
		return m.MessageID
	}
	return ""
}

type ChannelReactionsQuery struct {
	ChannelID            string   `protobuf:"bytes,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	MessageID            string   `protobuf:"bytes,2,opt,name=messageID,proto3" json:"messageID,omitempty"`
	Emoji                string   `protobuf:"bytes,3,opt,name=emoji,proto3" json:"emoji,omitempty"`
	BeforeUserID         string   `protobuf:"bytes,4,opt,name=beforeUserID,proto3" json:"beforeUserID,omitempty"`
	AfterUserID          string   `protobuf:"bytes,5,opt,name=afterUserID,proto3" json:"afterUserID,omitempty"`
	Limit                int32    `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelReactionsQuery) Reset()         { *m = ChannelReactionsQuery{} }
func (m *ChannelReactionsQuery) String() string { return proto.CompactTextString(m) }
func (*ChannelReactionsQuery) ProtoMessage()    {}
func (*ChannelReactionsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{6}
}

func (m *ChannelReactionsQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelReactionsQuery.Unmarshal(m, b)
}
func (m *ChannelReactionsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelReactionsQuery.Marshal(b, m, deterministic)
}
func (m *ChannelReactionsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelReactionsQuery.Merge(m, src)
}
func (m *ChannelReactionsQuery) XXX_Size() int {
	return xxx_messageInfo_ChannelReactionsQuery.Size(m)
}
func (m *ChannelReactionsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelReactionsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelReactionsQuery proto.InternalMessageInfo

func (m *ChannelReactionsQuery) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *ChannelReactionsQuery) GetMessageID() string {
	if m != nil {
		return m.MessageID
	}
	return ""
}

func (m *ChannelReactionsQuery) GetEmoji() string {
	if m != nil {
		return m.Emoji
	}
	return ""
}

func (m *ChannelReactionsQuery) GetBeforeUserID() string {
	if m != nil {
		return m.BeforeUserID
	}
	return ""
}

func (m *ChannelReactionsQuery) GetAfterUserID() string {
	if m != nil {
		return m.AfterUserID
	}
	return ""
}

func (m *ChannelReactionsQuery) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type UserQuery struct {
	UserID               string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserQuery) Reset()         { *m = UserQuery{} }
func (m *UserQuery) String() string { return proto.CompactTextString(m) }
func (*UserQuery) ProtoMessage()    {}
func (*UserQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{7}
}

func (m *UserQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserQuery.Unmarshal(m, b)
}
func (m *UserQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserQuery.Marshal(b, m, deterministic)
}
func (m *UserQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserQuery.Merge(m, src)
}
func (m *UserQuery) XXX_Size() int {
	return xxx_messageInfo_UserQuery.Size(m)
}
func (m *UserQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_UserQuery.DiscardUnknown(m)
}

var xxx_messageInfo_UserQuery proto.InternalMessageInfo

func (m *UserQuery) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GuildList struct {
	Guilds               []*Guild `protobuf:"bytes,1,rep,name=guilds,proto3" json:"guilds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuildList) Reset()         { *m = GuildList{} }
func (m *GuildList) String() string { return proto.CompactTextString(m) }
func (*GuildList) ProtoMessage()    {}
func (*GuildList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{8}
}

func (m *GuildList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GuildList.Unmarshal(m, b)
}
func (m *GuildList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GuildList.Marshal(b, m, deterministic)
}
func (m *GuildList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildList.Merge(m, src)
}
func (m *GuildList) XXX_Size() int {
	return xxx_messageInfo_GuildList.Size(m)
}
func (m *GuildList) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildList.DiscardUnknown(m)
}

var xxx_messageInfo_GuildList proto.InternalMessageInfo

func (m *GuildList) GetGuilds() []*Guild {
	if m != nil {
		return m.Guilds
	}
	return nil
}

type Guild struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon                 string   `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Splash               string   `protobuf:"bytes,4,opt,name=splash,proto3" json:"splash,omitempty"`
	OwnerID              string   `protobuf:"bytes,5,opt,name=ownerID,proto3" json:"ownerID,omitempty"`
	Permissions          int32    `protobuf:"varint,6,opt,name=permissions,proto3" json:"permissions,omitempty"`
	AfkChannelID         string   `protobuf:"bytes,7,opt,name=afkChannelID,proto3" json:"afkChannelID,omitempty"`
	EmbedEnabled         bool     `protobuf:"varint,8,opt,name=embedEnabled,proto3" json:"embedEnabled,omitempty"`
	SystemChannelID      string   `protobuf:"bytes,9,opt,name=systemChannelID,proto3" json:"systemChannelID,omitempty"`
	Description          string   `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	JoinedAt             string   `protobuf:"bytes,11,opt,name=joinedAt,proto3" json:"joinedAt,omitempty"`
	MemberCount          string   `protobuf:"bytes,12,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Guild) Reset()         { *m = Guild{} }
func (m *Guild) String() string { return proto.CompactTextString(m) }
func (*Guild) ProtoMessage()    {}
func (*Guild) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{9}
}

func (m *Guild) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Guild.Unmarshal(m, b)
}
func (m *Guild) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Guild.Marshal(b, m, deterministic)
}
func (m *Guild) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Guild.Merge(m, src)
}
func (m *Guild) XXX_Size() int {
	return xxx_messageInfo_Guild.Size(m)
}
func (m *Guild) XXX_DiscardUnknown() {
	xxx_messageInfo_Guild.DiscardUnknown(m)
}

var xxx_messageInfo_Guild proto.InternalMessageInfo

func (m *Guild) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Guild) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Guild) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Guild) GetSplash() string {
	if m != nil {
		return m.Splash
	}
	return ""
}

func (m *Guild) GetOwnerID() string {
	if m != nil {
		return m.OwnerID
	}
	return ""
}

func (m *Guild) GetPermissions() int32 {
	if m != nil {
		return m.Permissions
	}
	return 0
}

func (m *Guild) GetAfkChannelID() string {
	if m != nil {
		return m.AfkChannelID
	}
	return ""
}

func (m *Guild) GetEmbedEnabled() bool {
	if m != nil {
		return m.EmbedEnabled
	}
	return false
}

func (m *Guild) GetSystemChannelID() string {
	if m != nil {
		return m.SystemChannelID
	}
	return ""
}

func (m *Guild) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Guild) GetJoinedAt() string {
	if m != nil {
		return m.JoinedAt
	}
	return ""
}

func (m *Guild) GetMemberCount() string {
	if m != nil {
		return m.MemberCount
	}
	return ""
}

type ChannelList struct {
	Channels             []*Channel `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ChannelList) Reset()         { *m = ChannelList{} }
func (m *ChannelList) String() string { return proto.CompactTextString(m) }
func (*ChannelList) ProtoMessage()    {}
func (*ChannelList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{10}
}

func (m *ChannelList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelList.Unmarshal(m, b)
}
func (m *ChannelList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelList.Marshal(b, m, deterministic)
}
func (m *ChannelList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelList.Merge(m, src)
}
func (m *ChannelList) XXX_Size() int {
	return xxx_messageInfo_ChannelList.Size(m)
}
func (m *ChannelList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelList.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelList proto.InternalMessageInfo

func (m *ChannelList) GetChannels() []*Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

type Channel struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	GuildID              string   `protobuf:"bytes,3,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Topic                string   `protobuf:"bytes,5,opt,name=topic,proto3" json:"topic,omitempty"`
	Nsfw                 bool     `protobuf:"varint,6,opt,name=nsfw,proto3" json:"nsfw,omitempty"`
	LastMessageID        string   `protobuf:"bytes,7,opt,name=lastMessageID,proto3" json:"lastMessageID,omitempty"`
	Bitrate              int32    `protobuf:"varint,8,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	UserLimit            int32    `protobuf:"varint,9,opt,name=userLimit,proto3" json:"userLimit,omitempty"`
	Recipients           []*User  `protobuf:"bytes,10,rep,name=recipients,proto3" json:"recipients,omitempty"`
	Icon                 string   `protobuf:"bytes,11,opt,name=icon,proto3" json:"icon,omitempty"`
	OwnerID              string   `protobuf:"bytes,12,opt,name=ownerID,proto3" json:"ownerID,omitempty"`
	ApplicationID        string   `protobuf:"bytes,13,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	ParentID             string   `protobuf:"bytes,14,opt,name=parentID,proto3" json:"parentID,omitempty"`
	LastPinTimestamp     string   `protobuf:"bytes,15,opt,name=lastPinTimestamp,proto3" json:"lastPinTimestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{11}
}

func (m *Channel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Channel.Unmarshal(m, b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
}
func (m *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(m, src)
}
func (m *Channel) XXX_Size() int {
	return xxx_messageInfo_Channel.Size(m)
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Channel) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Channel) GetGuildID() string {
	if m != nil {
		return m.GuildID
	}
	return ""
}

func (m *Channel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Channel) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Channel) GetNsfw() bool {
	if m != nil {
		return m.Nsfw
	}
	return false
}

func (m *Channel) GetLastMessageID() string {
	if m != nil {
		return m.LastMessageID
	}
	return ""
}

func (m *Channel) GetBitrate() int32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

func (m *Channel) GetUserLimit() int32 {
	if m != nil {
		return m.UserLimit
	}
	return 0
}

func (m *Channel) GetRecipients() []*User {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func (m *Channel) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Channel) GetOwnerID() string {
	if m != nil {
		return m.OwnerID
	}
	return ""
}

func (m *Channel) GetApplicationID() string {
	if m != nil {
		return m.ApplicationID
	}
	return ""
}

func (m *Channel) GetParentID() string {
	if m != nil {
		return m.ParentID
	}
	return ""
}

func (m *Channel) GetLastPinTimestamp() string {
	if m != nil {
		return m.LastPinTimestamp
	}
	return ""
}

type GuildMemberList struct {
	Members              []*GuildMember `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GuildMemberList) Reset()         { *m = GuildMemberList{} }
func (m *GuildMemberList) String() string { return proto.CompactTextString(m) }
func (*GuildMemberList) ProtoMessage()    {}
func (*GuildMemberList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{12}
}

func (m *GuildMemberList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GuildMemberList.Unmarshal(m, b)
}
func (m *GuildMemberList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GuildMemberList.Marshal(b, m, deterministic)
}
func (m *GuildMemberList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildMemberList.Merge(m, src)
}
func (m *GuildMemberList) XXX_Size() int {
	return xxx_messageInfo_GuildMemberList.Size(m)
}
func (m *GuildMemberList) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildMemberList.DiscardUnknown(m)
}

var xxx_messageInfo_GuildMemberList proto.InternalMessageInfo

func (m *GuildMemberList) GetMembers() []*GuildMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type GuildMember struct {
	User                 *User    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Nick                 string   `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Roles                []string `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	JoinedAt             string   `protobuf:"bytes,4,opt,name=joinedAt,proto3" json:"joinedAt,omitempty"`
	PremiumSince         string   `protobuf:"bytes,5,opt,name=premiumSince,proto3" json:"premiumSince,omitempty"`
	Deaf                 bool     `protobuf:"varint,6,opt,name=deaf,proto3" json:"deaf,omitempty"`
	Mute                 bool     `protobuf:"varint,7,opt,name=mute,proto3" json:"mute,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuildMember) Reset()         { *m = GuildMember{} }
func (m *GuildMember) String() string { return proto.CompactTextString(m) }
func (*GuildMember) ProtoMessage()    {}
func (*GuildMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{13}
}

func (m *GuildMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GuildMember.Unmarshal(m, b)
}
func (m *GuildMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GuildMember.Marshal(b, m, deterministic)
}
func (m *GuildMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildMember.Merge(m, src)
}
func (m *GuildMember) XXX_Size() int {
	return xxx_messageInfo_GuildMember.Size(m)
}
func (m *GuildMember) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildMember.DiscardUnknown(m)
}

var xxx_messageInfo_GuildMember proto.InternalMessageInfo

func (m *GuildMember) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GuildMember) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *GuildMember) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *GuildMember) GetJoinedAt() string {
	if m != nil {
		return m.JoinedAt
	}
	return ""
}

func (m *GuildMember) GetPremiumSince() string {
	if m != nil {
		return m.PremiumSince
	}
	return ""
}

func (m *GuildMember) GetDeaf() bool {
	if m != nil {
		return m.Deaf
	}
	return false
}

func (m *GuildMember) GetMute() bool {
	if m != nil {
		return m.Mute
	}
	return false
}

type GuildRoleList struct {
	Roles                []*GuildRole `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GuildRoleList) Reset()         { *m = GuildRoleList{} }
func (m *GuildRoleList) String() string { return proto.CompactTextString(m) }
func (*GuildRoleList) ProtoMessage()    {}
func (*GuildRoleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{14}
}

func (m *GuildRoleList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GuildRoleList.Unmarshal(m, b)
}
func (m *GuildRoleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GuildRoleList.Marshal(b, m, deterministic)
}
func (m *GuildRoleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildRoleList.Merge(m, src)
}
func (m *GuildRoleList) XXX_Size() int {
	return xxx_messageInfo_GuildRoleList.Size(m)
}
func (m *GuildRoleList) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildRoleList.DiscardUnknown(m)
}

var xxx_messageInfo_GuildRoleList proto.InternalMessageInfo

func (m *GuildRoleList) GetRoles() []*GuildRole {
	if m != nil {
		return m.Roles
	}
	return nil
}

type GuildRole struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Color                int32    `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	Hoist                bool     `protobuf:"varint,4,opt,name=hoist,proto3" json:"hoist,omitempty"`
	Position             int32    `protobuf:"varint,5,opt,name=position,proto3" json:"position,omitempty"`
	Permissions          int32    `protobuf:"varint,6,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Managed              bool     `protobuf:"varint,7,opt,name=managed,proto3" json:"managed,omitempty"`
	Mentionable          bool     `protobuf:"varint,8,opt,name=mentionable,proto3" json:"mentionable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuildRole) Reset()         { *m = GuildRole{} }
func (m *GuildRole) String() string { return proto.CompactTextString(m) }
func (*GuildRole) ProtoMessage()    {}
func (*GuildRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{15}
}

func (m *GuildRole) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GuildRole.Unmarshal(m, b)
}
func (m *GuildRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GuildRole.Marshal(b, m, deterministic)
}
func (m *GuildRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildRole.Merge(m, src)
}
func (m *GuildRole) XXX_Size() int {
	return xxx_messageInfo_GuildRole.Size(m)
}
func (m *GuildRole) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildRole.DiscardUnknown(m)
}

var xxx_messageInfo_GuildRole proto.InternalMessageInfo

func (m *GuildRole) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GuildRole) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildRole) GetColor() int32 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *GuildRole) GetHoist() bool {
	if m != nil {
		return m.Hoist
	}
	return false
}

func (m *GuildRole) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *GuildRole) GetPermissions() int32 {
	if m != nil {
		return m.Permissions
	}
	return 0
}

func (m *GuildRole) GetManaged() bool {
	if m != nil {
		return m.Managed
	}
	return false
}

func (m *GuildRole) GetMentionable() bool {
	if m != nil {
		return m.Mentionable
	}
	return false
}

type MessageList struct {
	Messages             []*Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MessageList) Reset()         { *m = MessageList{} }
func (m *MessageList) String() string { return proto.CompactTextString(m) }
func (*MessageList) ProtoMessage()    {}
func (*MessageList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{16}
}

func (m *MessageList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageList.Unmarshal(m, b)
}
func (m *MessageList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageList.Marshal(b, m, deterministic)
}
func (m *MessageList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageList.Merge(m, src)
}
func (m *MessageList) XXX_Size() int {
	return xxx_messageInfo_MessageList.Size(m)
}
func (m *MessageList) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageList.DiscardUnknown(m)
}

var xxx_messageInfo_MessageList proto.InternalMessageInfo

func (m *MessageList) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type Message struct {
	ID                   string       `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	ChannelID            string       `protobuf:"bytes,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
	GuildID              string       `protobuf:"bytes,3,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Author               *User        `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	Member               *GuildMember `protobuf:"bytes,5,opt,name=member,proto3" json:"member,omitempty"`
	Content              string       `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Timestamp            string       `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	EditedTimestamp      string       `protobuf:"bytes,8,opt,name=editedTimestamp,proto3" json:"editedTimestamp,omitempty"`
	Tts                  bool         `protobuf:"varint,9,opt,name=tts,proto3" json:"tts,omitempty"`
	MentionEveryone      bool         `protobuf:"varint,10,opt,name=mentionEveryone,proto3" json:"mentionEveryone,omitempty"`
	Mentions             []*User      `protobuf:"bytes,11,rep,name=mentions,proto3" json:"mentions,omitempty"`
	MentionRoles         []string     `protobuf:"bytes,12,rep,name=mentionRoles,proto3" json:"mentionRoles,omitempty"`
	Reactions            []*Reaction  `protobuf:"bytes,13,rep,name=reactions,proto3" json:"reactions,omitempty"`
	Nonce                string       `protobuf:"bytes,14,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Pinned               bool         `protobuf:"varint,15,opt,name=pinned,proto3" json:"pinned,omitempty"`
	WebhookID            string       `protobuf:"bytes,16,opt,name=webhookID,proto3" json:"webhookID,omitempty"`
	Type                 int32        `protobuf:"varint,17,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{17}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Message) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *Message) GetGuildID() string {
	if m != nil {
		return m.GuildID
	}
	return ""
}

func (m *Message) GetAuthor() *User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Message) GetMember() *GuildMember {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *Message) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Message) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Message) GetEditedTimestamp() string {
	if m != nil {
		return m.EditedTimestamp
	}
	return ""
}

func (m *Message) GetTts() bool {
	if m != nil {
		return m.Tts
	}
	return false
}

func (m *Message) GetMentionEveryone() bool {
	if m != nil {
		return m.MentionEveryone
	}
	return false
}

func (m *Message) GetMentions() []*User {
	if m != nil {
		return m.Mentions
	}
	return nil
}

func (m *Message) GetMentionRoles() []string {
	if m != nil {
		return m.MentionRoles
	}
	return nil
}

func (m *Message) GetReactions() []*Reaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

func (m *Message) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *Message) GetPinned() bool {
	if m != nil {
		return m.Pinned
	}
	return false
}

func (m *Message) GetWebhookID() string {
	if m != nil {
		return m.WebhookID
	}
	return ""
}

func (m *Message) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type Reaction struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Me                   bool     `protobuf:"varint,2,opt,name=me,proto3" json:"me,omitempty"`
	Emoji                *Emoji   `protobuf:"bytes,3,opt,name=emoji,proto3" json:"emoji,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reaction) Reset()         { *m = Reaction{} }
func (m *Reaction) String() string { return proto.CompactTextString(m) }
func (*Reaction) ProtoMessage()    {}
func (*Reaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{18}
}

func (m *Reaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reaction.Unmarshal(m, b)
}
func (m *Reaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reaction.Marshal(b, m, deterministic)
}
func (m *Reaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reaction.Merge(m, src)
}
func (m *Reaction) XXX_Size() int {
	return xxx_messageInfo_Reaction.Size(m)
}
func (m *Reaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Reaction.DiscardUnknown(m)
}

var xxx_messageInfo_Reaction proto.InternalMessageInfo

func (m *Reaction) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Reaction) GetMe() bool {
	if m != nil {
		return m.Me
	}
	return false
}

func (m *Reaction) GetEmoji() *Emoji {
	if m != nil {
		return m.Emoji
	}
	return nil
}

type Emoji struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Roles                []string `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	User                 *User    `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	RequireColons        bool     `protobuf:"varint,5,opt,name=requireColons,proto3" json:"requireColons,omitempty"`
	Managed              bool     `protobuf:"varint,6,opt,name=managed,proto3" json:"managed,omitempty"`
	Animated             bool     `protobuf:"varint,7,opt,name=animated,proto3" json:"animated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Emoji) Reset()         { *m = Emoji{} }
func (m *Emoji) String() string { return proto.CompactTextString(m) }
func (*Emoji) ProtoMessage()    {}
func (*Emoji) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{19}
}

func (m *Emoji) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Emoji.Unmarshal(m, b)
}
func (m *Emoji) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Emoji.Marshal(b, m, deterministic)
}
func (m *Emoji) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Emoji.Merge(m, src)
}
func (m *Emoji) XXX_Size() int {
	return xxx_messageInfo_Emoji.Size(m)
}
func (m *Emoji) XXX_DiscardUnknown() {
	xxx_messageInfo_Emoji.DiscardUnknown(m)
}

var xxx_messageInfo_Emoji proto.InternalMessageInfo

func (m *Emoji) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Emoji) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Emoji) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Emoji) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Emoji) GetRequireColons() bool {
	if m != nil {
		return m.RequireColons
	}
	return false
}

func (m *Emoji) GetManaged() bool {
	if m != nil {
		return m.Managed
	}
	return false
}

func (m *Emoji) GetAnimated() bool {
	if m != nil {
		return m.Animated
	}
	return false
}

type UserList struct {
	Users                []*User  `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserList) Reset()         { *m = UserList{} }
func (m *UserList) String() string { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()    {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{20}
}

func (m *UserList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserList.Unmarshal(m, b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
}
func (m *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(m, src)
}
func (m *UserList) XXX_Size() int {
	return xxx_messageInfo_UserList.Size(m)
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type User struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Discriminator        string   `protobuf:"bytes,3,opt,name=discriminator,proto3" json:"discriminator,omitempty"`
	Avatar               string   `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Bot                  bool     `protobuf:"varint,5,opt,name=bot,proto3" json:"bot,omitempty"`
	Locale               string   `protobuf:"bytes,6,opt,name=locale,proto3" json:"locale,omitempty"`
	Flags                int32    `protobuf:"varint,7,opt,name=flags,proto3" json:"flags,omitempty"`
	PremiumType          int32    `protobuf:"varint,8,opt,name=premiumType,proto3" json:"premiumType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_d37f1fb6677774d8, []int{21}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetDiscriminator() string {
	if m != nil {
		return m.Discriminator
	}
	return ""
}

func (m *User) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *User) GetBot() bool {
	if m != nil {
		return m.Bot
	}
	return false
}

func (m *User) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *User) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *User) GetPremiumType() int32 {
	if m != nil {
		return m.PremiumType
	}
	return 0
}

func init() {
	proto.RegisterType((*GuildQuery)(nil), "com.cyto.discord.GuildQuery")
	proto.RegisterType((*GuildMemberQuery)(nil), "com.cyto.discord.GuildMemberQuery")
	proto.RegisterType((*GuildMembersQuery)(nil), "com.cyto.discord.GuildMembersQuery")
	proto.RegisterType((*ChannelQuery)(nil), "com.cyto.discord.ChannelQuery")
	proto.RegisterType((*ChannelMessagesQuery)(nil), "com.cyto.discord.ChannelMessagesQuery")
	proto.RegisterType((*ChannelMessageQuery)(nil), "com.cyto.discord.ChannelMessageQuery")
	proto.RegisterType((*ChannelReactionsQuery)(nil), "com.cyto.discord.ChannelReactionsQuery")
	proto.RegisterType((*UserQuery)(nil), "com.cyto.discord.UserQuery")
	proto.RegisterType((*GuildList)(nil), "com.cyto.discord.GuildList")
	proto.RegisterType((*Guild)(nil), "com.cyto.discord.Guild")
	proto.RegisterType((*ChannelList)(nil), "com.cyto.discord.ChannelList")
	proto.RegisterType((*Channel)(nil), "com.cyto.discord.Channel")
	proto.RegisterType((*GuildMemberList)(nil), "com.cyto.discord.GuildMemberList")
	proto.RegisterType((*GuildMember)(nil), "com.cyto.discord.GuildMember")
	proto.RegisterType((*GuildRoleList)(nil), "com.cyto.discord.GuildRoleList")
	proto.RegisterType((*GuildRole)(nil), "com.cyto.discord.GuildRole")
	proto.RegisterType((*MessageList)(nil), "com.cyto.discord.MessageList")
	proto.RegisterType((*Message)(nil), "com.cyto.discord.Message")
	proto.RegisterType((*Reaction)(nil), "com.cyto.discord.Reaction")
	proto.RegisterType((*Emoji)(nil), "com.cyto.discord.Emoji")
	proto.RegisterType((*UserList)(nil), "com.cyto.discord.UserList")
	proto.RegisterType((*User)(nil), "com.cyto.discord.User")
}

func init() { proto.RegisterFile("discord.proto", fileDescriptor_d37f1fb6677774d8) }

var fileDescriptor_d37f1fb6677774d8 = []byte{
	// 1524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x5f, 0x6f, 0xdc, 0xc4,
	0x16, 0xcf, 0x26, 0xbb, 0x59, 0xef, 0x49, 0x36, 0x4d, 0xe7, 0xe6, 0xf6, 0xfa, 0x6e, 0x5b, 0x08,
	0x6e, 0x29, 0x51, 0x55, 0xb6, 0xa2, 0xa8, 0xd0, 0x07, 0x1e, 0xa0, 0xd9, 0x28, 0x0a, 0x6a, 0xa5,
	0xd6, 0xb4, 0xe2, 0x05, 0x84, 0xbc, 0xf6, 0x24, 0x99, 0xc6, 0xf6, 0x18, 0xcf, 0x6c, 0xab, 0x7c,
	0x32, 0x3e, 0x01, 0x08, 0xc4, 0x1b, 0x12, 0xaf, 0xbc, 0xf1, 0x3d, 0xd0, 0x39, 0x33, 0xfe, 0xb7,
	0x1b, 0x6f, 0x22, 0xf1, 0xe6, 0xf3, 0xf3, 0x99, 0x33, 0xe7, 0xef, 0x6f, 0x66, 0x60, 0x18, 0x09,
	0x15, 0xca, 0x3c, 0x1a, 0x67, 0xb9, 0xd4, 0x92, 0x6d, 0x87, 0x32, 0x19, 0x87, 0xe7, 0x5a, 0x8e,
	0x2d, 0x3e, 0xba, 0x79, 0x22, 0xe5, 0x49, 0xcc, 0x1f, 0xd2, 0xff, 0xe9, 0xec, 0xf8, 0x21, 0x4f,
	0x32, 0x7d, 0x6e, 0xd4, 0xbd, 0x7b, 0x00, 0x87, 0x33, 0x11, 0x47, 0x2f, 0x67, 0x3c, 0x3f, 0x67,
	0x2e, 0xf4, 0x4f, 0x50, 0x3a, 0x9a, 0xb8, 0x9d, 0xdd, 0xce, 0xde, 0xc0, 0x2f, 0x44, 0x6f, 0x02,
	0xdb, 0xa4, 0xf7, 0x9c, 0x27, 0x53, 0x9e, 0x5f, 0xa2, 0xcd, 0x6e, 0xc0, 0xfa, 0x4c, 0xf1, 0xfc,
	0x68, 0xe2, 0xae, 0xd2, 0x0f, 0x2b, 0x79, 0x1c, 0xae, 0xd7, 0xac, 0xa8, 0x39, 0x33, 0x51, 0xd3,
	0x4c, 0xc4, 0x76, 0xa0, 0x17, 0x8b, 0x44, 0x68, 0xb2, 0xd2, 0xf3, 0x8d, 0xc0, 0x76, 0x61, 0x23,
	0x38, 0xd6, 0x3c, 0x7f, 0x6d, 0x76, 0x58, 0xa3, 0x35, 0x75, 0xc8, 0x7b, 0x00, 0x9b, 0xfb, 0xa7,
	0x41, 0x9a, 0xf2, 0xd8, 0xec, 0x70, 0x0b, 0x06, 0xa1, 0x91, 0x4b, 0x57, 0x2b, 0xc0, 0xfb, 0xa5,
	0x03, 0x3b, 0x56, 0xfd, 0x39, 0x57, 0x2a, 0x38, 0xe1, 0xea, 0x0a, 0xcb, 0xd8, 0x1e, 0x5c, 0x0b,
	0x72, 0x39, 0x4b, 0x23, 0xbb, 0xa8, 0x0c, 0x76, 0x1e, 0x46, 0xcd, 0x29, 0x3f, 0x96, 0x39, 0xaf,
	0x34, 0x8d, 0xd3, 0xf3, 0x30, 0xbb, 0x07, 0x5b, 0x14, 0x47, 0xa5, 0xd8, 0x25, 0xc5, 0x39, 0xb4,
	0x4a, 0x4c, 0xaf, 0x96, 0x18, 0xef, 0x25, 0xfc, 0xa7, 0x19, 0xc7, 0x55, 0xc2, 0xb8, 0x05, 0x83,
	0x64, 0x2e, 0x80, 0x0a, 0xf0, 0x7e, 0xee, 0xc0, 0x7f, 0xad, 0x4d, 0x9f, 0x07, 0xa1, 0x16, 0x32,
	0x55, 0xff, 0xda, 0x2a, 0xba, 0xcf, 0x13, 0xf9, 0x46, 0xd8, 0x34, 0x18, 0x81, 0x79, 0xb0, 0x69,
	0xf2, 0x61, 0x0b, 0x6b, 0x42, 0x6f, 0x60, 0xf3, 0xb5, 0xef, 0x2d, 0xd4, 0xbe, 0x4a, 0xcd, 0x7a,
	0x3d, 0x35, 0x77, 0x60, 0x80, 0xff, 0x8d, 0xeb, 0x55, 0x77, 0x76, 0x1a, 0xdd, 0xf9, 0x05, 0x0c,
	0xa8, 0x3b, 0x9f, 0x09, 0xa5, 0xd9, 0x43, 0x58, 0xa7, 0x36, 0x54, 0x6e, 0x67, 0x77, 0x6d, 0x6f,
	0xe3, 0xd1, 0xff, 0xc6, 0xf3, 0x83, 0x35, 0x26, 0x65, 0xdf, 0xaa, 0x79, 0x7f, 0xaf, 0x42, 0x8f,
	0x10, 0xb6, 0x05, 0xab, 0xa5, 0xed, 0x55, 0x31, 0x61, 0x0c, 0xba, 0x69, 0x90, 0x70, 0x9b, 0x07,
	0xfa, 0x46, 0x4c, 0x84, 0x32, 0xb5, 0x19, 0xa0, 0x6f, 0xf4, 0x4b, 0x65, 0x71, 0xa0, 0x4e, 0x6d,
	0xe8, 0x56, 0xc2, 0x01, 0x91, 0xef, 0xd2, 0x5a, 0xc0, 0x85, 0x88, 0xe9, 0xc8, 0x78, 0x9e, 0x08,
	0xa5, 0xb0, 0x30, 0x36, 0xe4, 0x3a, 0x84, 0x49, 0x0d, 0x8e, 0xcf, 0xf6, 0xcb, 0x4a, 0xf5, 0x4d,
	0x52, 0xeb, 0x18, 0xea, 0xe0, 0x3c, 0x46, 0x07, 0x69, 0x30, 0x8d, 0x79, 0xe4, 0x3a, 0xbb, 0x9d,
	0x3d, 0xc7, 0x6f, 0x60, 0xd8, 0xc3, 0xea, 0x5c, 0x69, 0x9e, 0x54, 0xa6, 0x06, 0xa6, 0x87, 0xe7,
	0x60, 0xf4, 0x29, 0xe2, 0x2a, 0xcc, 0x45, 0x86, 0xdd, 0xe2, 0x82, 0x29, 0x51, 0x0d, 0x62, 0x23,
	0x70, 0xde, 0x48, 0x91, 0xf2, 0xe8, 0x2b, 0xed, 0x6e, 0xd0, 0xef, 0x52, 0xc6, 0xd5, 0x09, 0x91,
	0xc3, 0xbe, 0x9c, 0xa5, 0xda, 0xdd, 0x34, 0xab, 0x6b, 0x90, 0x37, 0x81, 0x0d, 0xbb, 0x19, 0xd5,
	0xe9, 0x31, 0x38, 0xb6, 0xed, 0x8a, 0x4a, 0xfd, 0x7f, 0xb1, 0x52, 0x45, 0x0b, 0x97, 0xaa, 0xde,
	0x4f, 0x6b, 0xd0, 0xb7, 0xe8, 0x45, 0xf5, 0xd2, 0xe7, 0x19, 0xb7, 0xac, 0x43, 0xdf, 0x75, 0xae,
	0x5b, 0x6b, 0x72, 0x5d, 0x51, 0xdd, 0x6e, 0xad, 0xba, 0x3b, 0xd0, 0xd3, 0x32, 0x13, 0xa1, 0xad,
	0x97, 0x11, 0x48, 0x53, 0x1d, 0xbf, 0xa3, 0x32, 0x39, 0x3e, 0x7d, 0xb3, 0xbb, 0x30, 0x8c, 0x03,
	0xa5, 0xab, 0x81, 0x37, 0x05, 0x6a, 0x82, 0xb8, 0xfb, 0x54, 0xe8, 0x3c, 0xd0, 0x9c, 0x8a, 0xd3,
	0xf3, 0x0b, 0x11, 0x07, 0x0d, 0xbb, 0xf7, 0x19, 0xb5, 0xfc, 0x80, 0xfe, 0x55, 0x00, 0xfb, 0x0c,
	0x20, 0xe7, 0xa1, 0xc8, 0x04, 0x4f, 0xb5, 0x72, 0x81, 0xd2, 0x73, 0x63, 0x31, 0x3d, 0x38, 0x1a,
	0x7e, 0x4d, 0xb3, 0xec, 0xce, 0x8d, 0x5a, 0x77, 0xd6, 0xba, 0x70, 0xb3, 0xd9, 0x85, 0x77, 0x61,
	0x18, 0x64, 0x59, 0x2c, 0xc2, 0x00, 0xcb, 0x7b, 0x34, 0x71, 0x87, 0x26, 0x86, 0x06, 0x88, 0x55,
	0xcf, 0x82, 0x9c, 0xa7, 0xfa, 0x68, 0xe2, 0x6e, 0x99, 0xaa, 0x17, 0x32, 0xbb, 0x0f, 0xdb, 0x18,
	0xf0, 0x0b, 0x91, 0xbe, 0x12, 0x09, 0x57, 0x3a, 0x48, 0x32, 0xf7, 0x1a, 0xe9, 0x2c, 0xe0, 0xde,
	0xd7, 0x70, 0xad, 0x76, 0x86, 0x50, 0x0f, 0x7c, 0x0e, 0x7d, 0xd3, 0x21, 0x45, 0x0b, 0xdc, 0x6e,
	0x19, 0x56, 0xb3, 0xc6, 0x2f, 0xb4, 0xbd, 0xdf, 0x3b, 0xb0, 0x51, 0xfb, 0xc1, 0xee, 0x43, 0x17,
	0x93, 0x47, 0xbd, 0xd0, 0x9e, 0x29, 0xd2, 0xa1, 0x6a, 0x8a, 0xf0, 0xac, 0x9c, 0x6a, 0x11, 0x9e,
	0x61, 0xdd, 0x73, 0x19, 0x73, 0xe5, 0xae, 0xed, 0xae, 0x61, 0xdd, 0x49, 0x68, 0xf4, 0x7b, 0x77,
	0xae, 0xdf, 0x3d, 0xd8, 0xcc, 0x72, 0x9e, 0x88, 0x59, 0xf2, 0x8d, 0x48, 0x43, 0x6e, 0x1b, 0xa6,
	0x81, 0xe1, 0x4e, 0x11, 0x0f, 0x8e, 0x8b, 0xbe, 0xc1, 0x6f, 0xc4, 0x92, 0x99, 0xe6, 0xd4, 0x2e,
	0x8e, 0x4f, 0xdf, 0xde, 0x53, 0x18, 0x1a, 0x4a, 0x92, 0x31, 0xa7, 0xbc, 0x7c, 0x52, 0xb8, 0x63,
	0xb2, 0x72, 0xb3, 0x8d, 0xc2, 0x64, 0xcc, 0xad, 0xaf, 0xde, 0x9f, 0x1d, 0x4b, 0x82, 0x08, 0x5e,
	0x89, 0xc9, 0x76, 0xa0, 0x17, 0xca, 0x58, 0xe6, 0x34, 0x17, 0x3d, 0xdf, 0x08, 0x88, 0x9e, 0x4a,
	0xa1, 0x4c, 0xc0, 0x8e, 0x6f, 0x04, 0xea, 0x01, 0xa9, 0x04, 0x11, 0x83, 0x39, 0xba, 0x4a, 0xf9,
	0x0a, 0x5c, 0xe6, 0x42, 0x3f, 0x09, 0xd2, 0xe0, 0x84, 0x47, 0x36, 0xec, 0x42, 0x34, 0xac, 0x91,
	0xa2, 0x19, 0x64, 0x2b, 0x4b, 0x60, 0x75, 0x08, 0x59, 0xc3, 0x8e, 0x53, 0xc1, 0x1a, 0xf6, 0x38,
	0x5a, 0xc2, 0x1a, 0x76, 0x81, 0x5f, 0xaa, 0x7a, 0xbf, 0x76, 0xa1, 0x6f, 0xd1, 0x85, 0xdc, 0x34,
	0x0e, 0xc4, 0xd5, 0xf9, 0x03, 0xb1, 0x9d, 0x3f, 0xc6, 0xb0, 0x1e, 0xcc, 0xf4, 0xa9, 0xcc, 0x29,
	0x55, 0xed, 0x5d, 0x67, 0xb5, 0xd8, 0x63, 0x58, 0x37, 0xed, 0x4b, 0x19, 0xbc, 0xb4, 0xd7, 0xad,
	0x32, 0x3a, 0x10, 0xca, 0x54, 0xf3, 0xd4, 0x9c, 0x8c, 0x03, 0xbf, 0x10, 0xd1, 0x71, 0x5d, 0x4e,
	0x9d, 0xa1, 0x9f, 0x0a, 0x40, 0xe2, 0xe7, 0x91, 0xd0, 0x3c, 0xaa, 0x26, 0xd3, 0x31, 0xc4, 0x3f,
	0x07, 0xb3, 0x6d, 0x58, 0xd3, 0x5a, 0x11, 0x09, 0x39, 0x3e, 0x7e, 0xe2, 0x5a, 0x5b, 0x83, 0x83,
	0xb7, 0x3c, 0x3f, 0x97, 0x29, 0xa7, 0xe3, 0xc0, 0xf1, 0xe7, 0x61, 0xf6, 0x08, 0xeb, 0x41, 0x90,
	0x72, 0x37, 0x96, 0xd2, 0x54, 0xa9, 0x87, 0xa3, 0x63, 0xbf, 0x7d, 0x6a, 0xf2, 0x4d, 0x9a, 0xb9,
	0x06, 0xc6, 0x9e, 0xc0, 0x20, 0x2f, 0xee, 0x2d, 0xee, 0x90, 0x0c, 0x8f, 0x16, 0x0d, 0x17, 0x57,
	0x1b, 0xbf, 0x52, 0xc6, 0x06, 0x4e, 0x25, 0x4e, 0xa4, 0xe1, 0x2a, 0x23, 0xe0, 0x11, 0x9d, 0x89,
	0x34, 0xe5, 0x11, 0xd1, 0x93, 0xe3, 0x5b, 0x09, 0x73, 0xf8, 0x8e, 0x4f, 0x4f, 0xa5, 0x3c, 0x3b,
	0x9a, 0xb8, 0xdb, 0x26, 0x87, 0x25, 0x50, 0x1e, 0x28, 0xd7, 0xab, 0x03, 0xc5, 0xfb, 0x01, 0x9c,
	0x62, 0x5b, 0x33, 0x42, 0x78, 0xdc, 0x75, 0x8a, 0x11, 0x9a, 0xa5, 0x1a, 0x1b, 0xcc, 0x8e, 0x9a,
	0xe3, 0xaf, 0x26, 0x9c, 0x7d, 0x5c, 0xbf, 0x35, 0x5d, 0x78, 0x21, 0x39, 0xc0, 0xdf, 0xf6, 0x3a,
	0xe5, 0xfd, 0xd6, 0x81, 0x1e, 0x01, 0x57, 0x9d, 0xe2, 0x0b, 0x98, 0xab, 0xe0, 0xc3, 0xee, 0x15,
	0xf8, 0xf0, 0x2e, 0x0c, 0x73, 0xfe, 0xe3, 0x4c, 0xe4, 0x7c, 0x5f, 0xc6, 0x98, 0xee, 0x1e, 0x79,
	0xde, 0x04, 0xeb, 0x33, 0xbc, 0xde, 0x9c, 0xe1, 0x11, 0x38, 0x41, 0x2a, 0x92, 0x40, 0x97, 0xe3,
	0x5d, 0xca, 0xde, 0x13, 0x70, 0x5e, 0x2b, 0x4b, 0xf6, 0x0f, 0xa0, 0x87, 0xfb, 0x15, 0x73, 0xdb,
	0xe6, 0x94, 0x51, 0xf2, 0xfe, 0xe8, 0x40, 0x17, 0xe5, 0x85, 0x24, 0x8c, 0xc0, 0x41, 0x8d, 0x5a,
	0x22, 0x4a, 0x19, 0x43, 0x41, 0x5b, 0xb9, 0x48, 0x44, 0x1a, 0x68, 0x4b, 0x6d, 0x03, 0xbf, 0x09,
	0x62, 0x2f, 0x04, 0x6f, 0x03, 0x1d, 0xe4, 0xc5, 0x75, 0xcd, 0x48, 0x38, 0x07, 0x53, 0xa9, 0x6d,
	0xf8, 0xf8, 0x89, 0x9a, 0xb1, 0x0c, 0x83, 0x98, 0xdb, 0xd1, 0xb3, 0x12, 0x26, 0xfd, 0x38, 0x0e,
	0x4e, 0x14, 0xc5, 0xdb, 0xf3, 0x8d, 0x40, 0x44, 0x68, 0xe8, 0xff, 0x15, 0x36, 0x8d, 0x63, 0x89,
	0xb0, 0x82, 0x1e, 0xfd, 0xd5, 0x87, 0xfe, 0xc4, 0x04, 0xcb, 0x9e, 0xc2, 0xe0, 0x90, 0x6b, 0x9a,
	0x78, 0xc5, 0x6e, 0x8c, 0xcd, 0x5b, 0x6f, 0x5c, 0xbc, 0xf5, 0xc6, 0x07, 0xf8, 0xd6, 0x1b, 0xb5,
	0x31, 0x3f, 0x26, 0xd4, 0x5b, 0x61, 0xfb, 0xe0, 0x14, 0x36, 0xd8, 0xad, 0x16, 0x55, 0xba, 0x3a,
	0x8f, 0xda, 0x6e, 0xc1, 0xde, 0x0a, 0x7b, 0x09, 0xdb, 0x85, 0x11, 0x7b, 0xb1, 0x52, 0x97, 0x18,
	0xbb, 0xdd, 0x7a, 0x51, 0xb3, 0x7e, 0xbd, 0x86, 0xad, 0xc2, 0xa4, 0x3d, 0xa0, 0xbd, 0xa5, 0x64,
	0xd7, 0x6a, 0xb6, 0xa6, 0xe3, 0xad, 0xb0, 0xef, 0x60, 0x1b, 0x37, 0xa8, 0xbf, 0x44, 0xd9, 0x9d,
	0xa5, 0x8b, 0xcc, 0x9b, 0x67, 0xf4, 0xc1, 0x52, 0x25, 0xeb, 0xf4, 0x0b, 0x18, 0x16, 0x4e, 0x1b,
	0x0e, 0x5a, 0x9e, 0x84, 0xf7, 0x97, 0x1c, 0xca, 0xd6, 0xe2, 0x11, 0xc0, 0x21, 0xd7, 0xc5, 0x6d,
	0xf5, 0xbd, 0xd6, 0xac, 0x19, 0x83, 0xed, 0xd7, 0x5f, 0x6f, 0x85, 0x7d, 0x0f, 0xac, 0x32, 0x55,
	0xbc, 0x76, 0xd9, 0xbd, 0xd6, 0x25, 0x8d, 0x07, 0xf1, 0x45, 0x99, 0xad, 0x1d, 0xaa, 0xde, 0x0a,
	0xfb, 0x16, 0xae, 0x2f, 0x98, 0x67, 0x1f, 0x5e, 0x66, 0xbd, 0xd5, 0x6f, 0xfb, 0x9f, 0x3a, 0x61,
	0xf3, 0x90, 0xeb, 0xf2, 0x09, 0xca, 0x3e, 0x6a, 0xbf, 0xe3, 0x37, 0x9e, 0xa9, 0xa3, 0xd1, 0xc5,
	0xf4, 0x60, 0xfd, 0x7d, 0x45, 0xfe, 0xbe, 0x20, 0x0e, 0x2f, 0xb3, 0x71, 0x59, 0x82, 0x2f, 0xcd,
	0xc2, 0x97, 0xd0, 0x3f, 0xe4, 0x9a, 0x58, 0xe7, 0xe6, 0xc5, 0xdb, 0x1b, 0x43, 0x2d, 0xd4, 0xe5,
	0xad, 0x4c, 0xd7, 0x69, 0x7e, 0x3f, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xad, 0x2e, 0x15,
	0xdc, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DiscordClient is the client API for Discord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiscordClient interface {
	GetGuilds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GuildList, error)
	GetGuild(ctx context.Context, in *GuildQuery, opts ...grpc.CallOption) (*Guild, error)
	GetGuildChannels(ctx context.Context, in *GuildQuery, opts ...grpc.CallOption) (*ChannelList, error)
	GetGuildMember(ctx context.Context, in *GuildMemberQuery, opts ...grpc.CallOption) (*GuildMember, error)
	ListGuildMembers(ctx context.Context, in *GuildMembersQuery, opts ...grpc.CallOption) (*GuildMemberList, error)
	GetGuildRoles(ctx context.Context, in *GuildQuery, opts ...grpc.CallOption) (*GuildRoleList, error)
	GetChannel(ctx context.Context, in *ChannelQuery, opts ...grpc.CallOption) (*Channel, error)
	GetChannelMessages(ctx context.Context, in *ChannelMessagesQuery, opts ...grpc.CallOption) (*MessageList, error)
	GetChannelMessage(ctx context.Context, in *ChannelMessageQuery, opts ...grpc.CallOption) (*Message, error)
	GetReactions(ctx context.Context, in *ChannelReactionsQuery, opts ...grpc.CallOption) (*UserList, error)
	GetPinnedMessages(ctx context.Context, in *ChannelQuery, opts ...grpc.CallOption) (*MessageList, error)
	GetUser(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*User, error)
}

type discordClient struct {
	cc *grpc.ClientConn
}

func NewDiscordClient(cc *grpc.ClientConn) DiscordClient {
	return &discordClient{cc}
}

func (c *discordClient) GetGuilds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GuildList, error) {
	out := new(GuildList)
	err := c.cc.Invoke(ctx, "/com.cyto.discord.Discord/GetGuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) GetGuild(ctx context.Context, in *GuildQuery, opts ...grpc.CallOption) (*Guild, error) {
	out := new(Guild)
	err := c.cc.Invoke(ctx, "/com.cyto.discord.Discord/GetGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) GetGuildChannels(ctx context.Context, in *GuildQuery, opts ...grpc.CallOption) (*ChannelList, error) {
	out := new(ChannelList)
	err := c.cc.Invoke(ctx, "/com.cyto.discord.Discord/GetGuildChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) GetGuildMember(ctx context.Context, in *GuildMemberQuery, opts ...grpc.CallOption) (*GuildMember, error) {
	out := new(GuildMember)
	err := c.cc.Invoke(ctx, "/com.cyto.discord.Discord/GetGuildMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) ListGuildMembers(ctx context.Context, in *GuildMembersQuery, opts ...grpc.CallOption) (*GuildMemberList, error) {
	out := new(GuildMemberList)
	err := c.cc.Invoke(ctx, "/com.cyto.discord.Discord/ListGuildMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) GetGuildRoles(ctx context.Context, in *GuildQuery, opts ...grpc.CallOption) (*GuildRoleList, error) {
	out := new(GuildRoleList)
	err := c.cc.Invoke(ctx, "/com.cyto.discord.Discord/GetGuildRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) GetChannel(ctx context.Context, in *ChannelQuery, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := c.cc.Invoke(ctx, "/com.cyto.discord.Discord/GetChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) GetChannelMessages(ctx context.Context, in *ChannelMessagesQuery, opts ...grpc.CallOption) (*MessageList, error) {
	out := new(MessageList)
	err := c.cc.Invoke(ctx, "/com.cyto.discord.Discord/GetChannelMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) GetChannelMessage(ctx context.Context, in *ChannelMessageQuery, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/com.cyto.discord.Discord/GetChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) GetReactions(ctx context.Context, in *ChannelReactionsQuery, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/com.cyto.discord.Discord/GetReactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) GetPinnedMessages(ctx context.Context, in *ChannelQuery, opts ...grpc.CallOption) (*MessageList, error) {
	out := new(MessageList)
	err := c.cc.Invoke(ctx, "/com.cyto.discord.Discord/GetPinnedMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) GetUser(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/com.cyto.discord.Discord/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscordServer is the server API for Discord service.
type DiscordServer interface {
	GetGuilds(context.Context, *empty.Empty) (*GuildList, error)
	GetGuild(context.Context, *GuildQuery) (*Guild, error)
	GetGuildChannels(context.Context, *GuildQuery) (*ChannelList, error)
	GetGuildMember(context.Context, *GuildMemberQuery) (*GuildMember, error)
	ListGuildMembers(context.Context, *GuildMembersQuery) (*GuildMemberList, error)
	GetGuildRoles(context.Context, *GuildQuery) (*GuildRoleList, error)
	GetChannel(context.Context, *ChannelQuery) (*Channel, error)
	GetChannelMessages(context.Context, *ChannelMessagesQuery) (*MessageList, error)
	GetChannelMessage(context.Context, *ChannelMessageQuery) (*Message, error)
	GetReactions(context.Context, *ChannelReactionsQuery) (*UserList, error)
	GetPinnedMessages(context.Context, *ChannelQuery) (*MessageList, error)
	GetUser(context.Context, *UserQuery) (*User, error)
}

// UnimplementedDiscordServer can be embedded to have forward compatible implementations.
type UnimplementedDiscordServer struct {
}

func (*UnimplementedDiscordServer) GetGuilds(ctx context.Context, req *empty.Empty) (*GuildList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuilds not implemented")
}
func (*UnimplementedDiscordServer) GetGuild(ctx context.Context, req *GuildQuery) (*Guild, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuild not implemented")
}
func (*UnimplementedDiscordServer) GetGuildChannels(ctx context.Context, req *GuildQuery) (*ChannelList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildChannels not implemented")
}
func (*UnimplementedDiscordServer) GetGuildMember(ctx context.Context, req *GuildMemberQuery) (*GuildMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildMember not implemented")
}
func (*UnimplementedDiscordServer) ListGuildMembers(ctx context.Context, req *GuildMembersQuery) (*GuildMemberList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGuildMembers not implemented")
}
func (*UnimplementedDiscordServer) GetGuildRoles(ctx context.Context, req *GuildQuery) (*GuildRoleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildRoles not implemented")
}
func (*UnimplementedDiscordServer) GetChannel(ctx context.Context, req *ChannelQuery) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (*UnimplementedDiscordServer) GetChannelMessages(ctx context.Context, req *ChannelMessagesQuery) (*MessageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMessages not implemented")
}
func (*UnimplementedDiscordServer) GetChannelMessage(ctx context.Context, req *ChannelMessageQuery) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMessage not implemented")
}
func (*UnimplementedDiscordServer) GetReactions(ctx context.Context, req *ChannelReactionsQuery) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReactions not implemented")
}
func (*UnimplementedDiscordServer) GetPinnedMessages(ctx context.Context, req *ChannelQuery) (*MessageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPinnedMessages not implemented")
}
func (*UnimplementedDiscordServer) GetUser(ctx context.Context, req *UserQuery) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}

func RegisterDiscordServer(s *grpc.Server, srv DiscordServer) {
	s.RegisterService(&_Discord_serviceDesc, srv)
}

func _Discord_GetGuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetGuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.discord.Discord/GetGuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetGuilds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_GetGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.discord.Discord/GetGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetGuild(ctx, req.(*GuildQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_GetGuildChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetGuildChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.discord.Discord/GetGuildChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetGuildChannels(ctx, req.(*GuildQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_GetGuildMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMemberQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetGuildMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.discord.Discord/GetGuildMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetGuildMember(ctx, req.(*GuildMemberQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_ListGuildMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMembersQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).ListGuildMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.discord.Discord/ListGuildMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).ListGuildMembers(ctx, req.(*GuildMembersQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_GetGuildRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetGuildRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.discord.Discord/GetGuildRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetGuildRoles(ctx, req.(*GuildQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.discord.Discord/GetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetChannel(ctx, req.(*ChannelQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_GetChannelMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessagesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetChannelMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.discord.Discord/GetChannelMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetChannelMessages(ctx, req.(*ChannelMessagesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_GetChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.discord.Discord/GetChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetChannelMessage(ctx, req.(*ChannelMessageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_GetReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelReactionsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.discord.Discord/GetReactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetReactions(ctx, req.(*ChannelReactionsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_GetPinnedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetPinnedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.discord.Discord/GetPinnedMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetPinnedMessages(ctx, req.(*ChannelQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.cyto.discord.Discord/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetUser(ctx, req.(*UserQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Discord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.cyto.discord.Discord",
	HandlerType: (*DiscordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGuilds",
			Handler:    _Discord_GetGuilds_Handler,
		},
		{
			MethodName: "GetGuild",
			Handler:    _Discord_GetGuild_Handler,
		},
		{
			MethodName: "GetGuildChannels",
			Handler:    _Discord_GetGuildChannels_Handler,
		},
		{
			MethodName: "GetGuildMember",
			Handler:    _Discord_GetGuildMember_Handler,
		},
		{
			MethodName: "ListGuildMembers",
			Handler:    _Discord_ListGuildMembers_Handler,
		},
		{
			MethodName: "GetGuildRoles",
			Handler:    _Discord_GetGuildRoles_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _Discord_GetChannel_Handler,
		},
		{
			MethodName: "GetChannelMessages",
			Handler:    _Discord_GetChannelMessages_Handler,
		},
		{
			MethodName: "GetChannelMessage",
			Handler:    _Discord_GetChannelMessage_Handler,
		},
		{
			MethodName: "GetReactions",
			Handler:    _Discord_GetReactions_Handler,
		},
		{
			MethodName: "GetPinnedMessages",
			Handler:    _Discord_GetPinnedMessages_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Discord_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discord.proto",
}
